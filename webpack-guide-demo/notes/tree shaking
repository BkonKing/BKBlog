1、tree shaking 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。
它依赖于 ES2015 模块系统中的静态结构特性，例如 import 和 export。
定义导出export但是没有import导入的代码，应该不打包

2、将文件标记为无副作用(side-effect-free)（只是找出文件，标记文件）
向 webpack 的 compiler 提供提示哪些代码是“纯粹部分”。
通过 package.json 的 "sideEffects" 属性来实现的。
如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack，它可以安全地删除未用到的 export 导出。
（副作用」的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。）
如果你的代码确实有一些副作用，那么可以改为提供一个数组，数组方式支持相关文件的相对路径、绝对路径和 glob 模式。
注意，任何导入的文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并导入 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除
"sideEffects": [
  "./src/some-side-effectful-file.js",
  "*.css"
]
还可以在 module.rules 配置选项 中设置 "sideEffects"

3、压缩输出（删除未使用代码）
上一步只能找出文件，我们不只是要找出，还需要在 bundle 中删除它们。为此，我们将使用 -p(production) 这个 webpack 编译标记，来启用 uglifyjs 压缩插件。（也可以通过 "mode" 配置选项轻松切换到压缩输出，只需设置为 "production"）
注意，--optimize-minimize 标记也会在 webpack 内部调用 UglifyJsPlugin。
在prod配置中引入plugins--new UglifyJSPlugin()
BabelMinifyWebpackPlugin、ClosureCompilerPlugin较受欢迎的插件

4、使用 tree shaking
使用 ES2015 模块语法（即 import 和 export）。
在项目 package.json 文件中，添加一个 "sideEffects" 入口。
引入一个能够删除未引用代码(dead code)的压缩工具(minifier)（例如 UglifyJSPlugin）。