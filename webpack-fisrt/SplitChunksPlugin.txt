optimization.splitChunks

默认情况下，它只会影响按需(on-demand)加载的chunks（自己import的），而不会影响到初始chunks，因为更改初始chunks将会影响到HTML文件项目运行时需要引入的的script项。
webpack将会按照以下原则自动切割chunks：
新chunk可被共享，（多次引入）或者是从node_modules引入的模块，
新chunk大于30kb（在 min+gz 压缩之前），
当按需加载块时，并行请求的最大数量小于或等于5（chunk切割按需加载不会大于5），
初始页面加载时(html中的script)，并行请求的最大数量小于或等于3（切割后chunk不能大于3个）。
当试图满足最后两个条件时，体积较大的chunks会优先处理。

optimization.splitChunks
以下是SplitChunksPlugin的默认配置：
module.exports = {
  //...
  optimization: {
    splitChunks: {
      // type:function (chunk) | string
      // 该选项决定优化哪些chunks。如果值为string，请确定为以下三种：all、async和initial。设置为all意味着公共chunk可能同时被同步和异步引入。
      // 异步引入例子：webpackChunkName决定了打包chunk的名称
      // import(/* webpackChunkName: "async-class-a" */  './classes/class-a').then(classA =>{
      //     classA.push(engligh);
      // });
      chunks: 'async',
      // 可以通过一个function来更精确的进行chunks控制。返回值就是需要优化的chunks.
      // 可以配合HtmlWebpackPlugin，使生成的html页面注入公共chunks
      // chunks (chunk) {
        // // 返回所有不是`my-excluded-chunk`的chunks
        // return chunk.name !== 'my-excluded-chunk';
      // },
      minSize: 30000, //type: number,生成的公共模块(打包后的文件)的最小size，单位是bytes,超出就会被分离。
      // type: number
      maxSize: 0,
      minChunks: 1, // type: number,代码切割之前的最小共用数量。
      maxAsyncRequests: 5, // type: number,按需载入的最大请求数。
      maxInitialRequests: 3, // type: number,单个入口文件的最大请求数。
      // type:string，默认情况下，webpack将使用块的来源(公用文件)和依赖他的文件名称生成名称(origin~chunkName)（例如vendors~main.js）。
      //假设我们生成了一个公用文件名字叫version，class-a,和class-b都依赖他，并且我们设置的连接符是"~"那么，最终生成的就是 version~class-a~class-b.js。
      // 此选项使您可以自定义连接符。
      automaticNameDelimiter: '~',
      name: true,
      cacheGroups: {
        vendors: {
          test: /[\\/]node_modules[\\/]/,
          priority: -10
        },
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true
        }
      }
    }
  }
};

maxSize项（无论是全局的optimization.splitChunks.maxSize还是每个缓存组内的optimization.splitChunks.cacheGroups[x].maxSize，或者缓存组回调optimization.splitChunks.fallbackCacheGroup.maxSize）会尝试对大于该值的chunks分割为更小的几部分。每部分需要大于minSize的值。该算法是固定的，并且模块的改变仅会造成局部影响。所以在使用长缓存组并且不需要记录时，可以使用该选项。如果切割结果不符合minSize要求，maxSize不会生效。

如果该chunk已经有了一个name，分割出的每个chunk都会有一个新名字。optimization.splitChunks.hidePathInfo项会使分割项根据原始chunk的name派生出一个hash值。

maxSize项意在HTTP/2和长缓存中通过增加网络请求数来达到更好的缓存效果。它也可以通过减少文件体积来加快构建速度。

splitChunks.cacheGroups
缓存组的配置项会继承splitChunks.*的配置，但是test，priority和reuseExistingChunk只能在缓存组中配置。如果不需要默认的缓存组，设置为false。

webpack.config.js

module.exports = {
  //...
  optimization: {
    splitChunks: {
      cacheGroups: {
        default: false
      }
    }
  }
};
splitChunks.cacheGroups.priority

number

一个模块可能会被多个缓存组匹配到，我们会根据具有更高优先级的缓存组来对它进行优化（简单的说就是优先级更高的缓存组才具有打包它的资格）。默认有个负数的优先级。

splitChunks.cacheGroups.{cacheGroup}.reuseExistingChunk

boolean

如果当前chunk包含的模块已经被主bundle打包进去，将不再被打包进当前chunk。这会影响到chunk name。

webpack.config.js

module.exports = {
  //...
  optimization: {
    splitChunks: {
      cacheGroups: {
        vendors: {
          reuseExistingChunk: true
        }
      }
    }
  }
};
splitChunks.cacheGroups.{cacheGroup}.test

function (module, chunk) | RegExp | string

确定缓存组会选择哪些模块进行优化。默认会对所有模块进行优化。你可以对路径或者chunk name做匹配。如果匹配到一个chunk name，它的所有子模块都会被选择进行优化。

webpack.config.js

module.exports = {
  //...
  optimization: {
    splitChunks: {
      cacheGroups: {
        vendors: {
          test (module, chunks) {
            //...
            return module.type === 'javascript/auto';
          }
        }
      }
    }
  }
};
splitChunks.cacheGroups.{cacheGroup}.filename

string

配置chunk name。output.filename的命名规则在这里也适用。

该选项也可以通过splitChunks.filename全局配置，但是我们不建议这么做，因为如果splitChunks.chunks没有设置为initial，有可能引发报错。

webpack.config.js

module.exports = {
  //...
  optimization: {
    splitChunks: {
      cacheGroups: {
        vendors: {
          filename: '[name].bundle.js'
        }
      }
    }
  }
};