optimization.splitChunks

默认情况下，它只会影响按需(on-demand)加载的chunks（自己import的），而不会影响到初始chunks，因为更改初始chunks将会影响到HTML文件项目运行时需要引入的的script项。
webpack将会按照以下原则自动切割chunks：
新chunk可被共享，（多次引入）或者是从node_modules引入的模块，
新chunk大于30kb（在 min+gz 压缩之前），
当按需加载块时，并行请求的最大数量小于或等于5（chunk切割按需加载不会大于5），
初始页面加载时(html中的script)，并行请求的最大数量小于或等于3（切割后chunk不能大于3个）。
当试图满足最后两个条件时，体积较大的chunks会优先处理。

optimization.splitChunks
以下是SplitChunksPlugin的默认配置：
module.exports = {
  //...
  optimization: {
    splitChunks: {
      // type:function (chunk) | string
      // 该选项决定优化哪些chunks。如果值为string，请确定为以下三种：all、async和initial。设置为all意味着公共chunk可能同时被同步和异步引入。
      // 异步引入例子：webpackChunkName决定了打包chunk的名称
      // import(/* webpackChunkName: "async-class-a" */  './classes/class-a').then(classA =>{
      //     classA.push(engligh);
      // });
      chunks: 'async',
      // 可以通过一个function来更精确的进行chunks控制。返回值就是需要优化的chunks.
      // 可以配合HtmlWebpackPlugin，使生成的html页面注入公共chunks
      // chunks (chunk) {
        // // 返回所有不是`my-excluded-chunk`的chunks
        // return chunk.name !== 'my-excluded-chunk';
      // },
      minSize: 30000, //type: number,生成的公共模块(打包后的文件)的最小size，单位是bytes,超出就会被分离。
      // type: number
      maxSize: 0,
      minChunks: 1, // type: number,代码切割之前的最小共用数量。
      maxAsyncRequests: 5, // type: number,按需载入的最大请求数。
      maxInitialRequests: 3, // type: number,单个入口文件的最大请求数。
      // type:string，默认情况下，webpack将使用块的来源(公用文件)和依赖他的文件名称生成名称(origin~chunkName)（例如vendors~main.js）。
      //假设我们生成了一个公用文件名字叫version，class-a,和class-b都依赖他，并且我们设置的连接符是"~"那么，最终生成的就是 version~class-a~class-b.js。
      // 此选项使您可以自定义连接符。
      automaticNameDelimiter: '~',
      name: true,
      cacheGroups: {
        vendors: {
          test: /[\\/]node_modules[\\/]/,
          priority: -10
        },
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true
        }
      }
    }
  }
};